/**
 * Learning Path Model
 * Stores personalized learning paths generated by AI based on test results
 */

const mongoose = require('mongoose');

const learningPathSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  
  // Skills analysis
  strengths: [{
    type: String,
    enum: ['reading', 'listening', 'writing', 'speaking']
  }],
  weaknesses: [{
    type: String,
    enum: ['reading', 'listening', 'writing', 'speaking']
  }],
  
  // AI-generated recommendations
  recommendations: [{
    skill: {
      type: String,
      enum: ['reading', 'listening', 'writing', 'speaking'],
      required: true
    },
    taskType: String, // e.g., "Task 2 Essay", "Section 4 Vocabulary"
    priority: {
      type: String,
      enum: ['high', 'medium', 'low'],
      default: 'medium'
    },
    description: String,
    estimatedTime: Number, // minutes
    resources: [String] // optional resource links
  }],
  
  // Overall assessment
  overallBand: {
    type: Number,
    min: 0,
    max: 9
  },
  targetBand: {
    type: Number,
    min: 0,
    max: 9
  },
  currentLevel: {
    type: String,
    enum: ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']
  },
  targetLevel: {
    type: String,
    enum: ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']
  },
  
  // Skills breakdown
  skillBands: {
    reading: Number,
    listening: Number,
    writing: Number,
    speaking: Number
  },
  
  // Study plan
  studyPlan: {
    dailyMinutes: Number,
    weeklySessions: Number,
    focusAreas: [String]
  },
  
  // Progress tracking
  completedRecommendations: [{
    recommendationId: mongoose.Schema.Types.ObjectId,
    completedAt: Date
  }],
  
  // Metadata
  generatedAt: {
    type: Date,
    default: Date.now
  },
  lastUpdated: {
    type: Date,
    default: Date.now
  },
  testResultsUsed: [{
    testId: mongoose.Schema.Types.ObjectId,
    testDate: Date
  }],
  
  // AI context
  aiPrompt: String, // Store prompt for debugging
  aiModel: {
    type: String,
    default: 'gpt-4o-mini'
  }
}, {
  timestamps: true
});

// Index for faster queries
learningPathSchema.index({ userId: 1, generatedAt: -1 });

module.exports = mongoose.model('LearningPath', learningPathSchema);
