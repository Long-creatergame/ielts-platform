const PDFDocument = require('pdfkit');
const QRCode = require('qrcode');
const User = require('../models/User');
const Test = require('../models/Test');
const config = require('../config');

const generateCertificate = async (req, res) => {
  try {
    const userId = req.user._id;
    const { testId } = req.params;

    // Find test and populate user data
    const test = await Test.findById(testId).populate('userId');
    if (!test) {
      return res.status(404).json({ error: 'Test not found' });
    }

    // Check if test belongs to current user
    if (test.userId._id.toString() !== userId.toString()) {
      return res.status(403).json({ error: 'Unauthorized access to test' });
    }

    // Create PDF document
    const doc = new PDFDocument({ 
      size: 'A4', 
      margin: 40,
      info: {
        Title: 'IELTS Test Report Form',
        Author: 'Antoree IELTS Platform',
        Subject: 'IELTS Certificate'
      }
    });

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader(
      'Content-Disposition',
      `attachment; filename=IELTS_TRF_${testId}.pdf`
    );
    doc.pipe(res);

    // Header
    doc
      .fontSize(22)
      .fillColor('#35b86d')
      .text('ANTOREE IELTS', { align: 'center' })
      .moveDown(0.3)
      .fontSize(16)
      .fillColor('#000')
      .text('IELTS Test Report Form (Unofficial)', { align: 'center' })
      .moveDown(1);

    // Candidate Information
    doc
      .fontSize(14)
      .fillColor('#333')
      .text('CANDIDATE INFORMATION', { underline: true })
      .moveDown(0.5)
      .fontSize(12)
      .text(`Name: ${test.userId.name}`)
      .text(`Email: ${test.userId.email}`)
      .text(`Test ID: ${test._id}`)
      .text(`Skill: ${test.skill.charAt(0).toUpperCase() + test.skill.slice(1)}`)
      .text(`Date: ${new Date(test.createdAt).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      })}`)
      .moveDown(1);

    // Scores Section
    const score = test.score || {};
    doc
      .fontSize(14)
      .fillColor('#333')
      .text('TEST SCORES', { underline: true })
      .moveDown(0.5)
      .fontSize(12);

    // Create a table for scores
    const scoreData = [
      ['Overall Band Score', score.overall ? score.overall.toFixed(1) : 'N/A'],
      ['Task Response', score.task ? score.task.toFixed(1) : 'N/A'],
      ['Coherence & Cohesion', score.coherence ? score.coherence.toFixed(1) : 'N/A'],
      ['Lexical Resource', score.lexical ? score.lexical.toFixed(1) : 'N/A'],
      ['Grammar Range & Accuracy', score.grammar ? score.grammar.toFixed(1) : 'N/A']
    ];

    let yPosition = doc.y;
    scoreData.forEach(([criterion, score]) => {
      doc
        .text(criterion, 50, yPosition)
        .text(score, 300, yPosition, { align: 'right' });
      yPosition += 25;
    });

    doc.moveDown(1);

    // AI Examiner Feedback
    doc
      .fontSize(14)
      .fillColor('#333')
      .text('AI EXAMINER FEEDBACK', { underline: true })
      .moveDown(0.5)
      .fontSize(11)
      .fillColor('#555')
      .text(test.aiFeedback || 'No feedback available.', {
        align: 'justify',
        lineGap: 4,
        width: 500
      })
      .moveDown(1);

    // QR Code Verification
    const verifyUrl = `${config.CLIENT_URL}/verify?tid=${testId}`;
    
    try {
      const qrImage = await QRCode.toDataURL(verifyUrl, {
        width: 120,
        margin: 2,
        color: {
          dark: '#35b86d',
          light: '#ffffff'
        }
      });

      // Add QR code to bottom right
      doc.image(qrImage, 400, 580, { width: 120 });
      
      // Add verification text
      doc
        .fontSize(9)
        .fillColor('#666')
        .text('Verify this certificate:', 400, 710)
        .text(verifyUrl, 400, 725, { width: 120, align: 'center' });
    } catch (qrError) {
      console.error('QR Code generation error:', qrError);
      doc
        .fontSize(9)
        .fillColor('#666')
        .text('Verification:', 400, 710)
        .text(verifyUrl, 400, 725, { width: 120, align: 'center' });
    }

    // Footer
    doc
      .moveDown(2)
      .fontSize(10)
      .fillColor('#777')
      .text(
        'Generated by Antoree IELTS Platform â€“ For educational purposes only',
        { align: 'center' }
      )
      .text(
        `Generated on: ${new Date().toLocaleDateString()}`,
        { align: 'center' }
      );

    doc.end();

  } catch (error) {
    console.error('Certificate generation error:', error);
    res.status(500).json({ error: 'Failed to generate certificate' });
  }
};

const verifyCertificate = async (req, res) => {
  try {
    const { testId } = req.params;

    // Find test and populate user data
    const test = await Test.findById(testId).populate('userId');
    if (!test) {
      return res.status(404).json({ error: 'Certificate not found' });
    }

    // Return public test information for verification
    res.json({
      id: test._id,
      skill: test.skill,
      score: test.score,
      feedback: test.aiFeedback,
      submittedAt: test.submittedAt,
      userId: {
        name: test.userId.name,
        email: test.userId.email
      }
    });

  } catch (error) {
    console.error('Certificate verification error:', error);
    res.status(500).json({ error: 'Failed to verify certificate' });
  }
};

module.exports = {
  generateCertificate,
  verifyCertificate
};
